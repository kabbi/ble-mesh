// @flow
declare class EventEmitter<Events: Object> {
  addListener<Event: $Keys<Events>>(
    event: Event,
    listener: (...$ElementType<Events, Event>) => any,
  ): this;
  emit: <Event: $Keys<Events>>(
    event: Event,
    ...$ElementType<Events, Event>
  ) => boolean;
  eventNames(): Array<$Keys<Events>>;
  listeners(event: $Keys<Events>): Array<Function>;
  listenerCount(event: $Keys<Events>): number;
  on<Event: $Keys<Events>>(
    event: Event,
    listener: (...$ElementType<Events, Event>) => any,
  ): this;
  once<Event: $Keys<Events>>(
    event: Event,
    listener: (...$ElementType<Events, Event>) => any,
  ): this;
  prependListener<Event: $Keys<Events>>(
    event: Event,
    listener: (...$ElementType<Events, Event>) => any,
  ): this;
  prependOnceListener<Event: $Keys<Events>>(
    event: Event,
    listener: (...$ElementType<Events, Event>) => any,
  ): this;
  removeAllListeners(event?: $Keys<Events>): this;
  removeListener(event: $Keys<Events>, listener: Function): this;
  setMaxListeners(n: number): this;
  getMaxListeners(): number;
}

declare module.exports: typeof EventEmitter;
